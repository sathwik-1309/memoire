c!
game_users_with_counts
c
gu2
gu1
Util.get_card_value(@game.used[-1])[0]
offload_card = gu2.cards[offload['offloaded_card_index']]
gu2 = @game.game_users.find_by_user_id(offload['player2_id'])
offload['type']
c!
c
c!
offload
c!
offload['type'] = SELF_OFFLOAD
offload
c!
offload['type']
c!
c
filter_params
c
filter_params
c
game.channel
c!
ActionCable.server.broadcast(game.channel, {"game_start": true})
c!
params[:id]
@current_user.game_users.where(game_id: params[:id])
@current_user.game_users
@current_user
@current_user.game_users
Game.first.game_users
Game.first
@current_user
gu
c
c!
game.id
game.used
game.used[-1]
c
gu1.cards
offload_card
c!
gu1.cards
offload['offloaded_card_index']-1
gu1
offload_card
c!
game.attributes.slice('stage')
game.attributes
hash
c
params[:game_id]
game
c
@current_user.games[1].id
@current_user.games[0].id
@current_user.games.length
@current_user.games
c
gu2
gu1
c!
gu1.cards
gu1.cards[powerplay['card1_index']-1]=replace_card2
gu1
c
gu1.cards[powerplay['card1_index']]
gu
gu1
c
gu1
gu1.cards
c
powerplay['player1']
powerplay["player_1"]
powerplay['player_1']
powerplay
powerplay['player1']
game.game_users.find_by(user_id: 2)
game.game_users.find_by(user_id: powerplay['player1'].to_i)
game.game_users.find_by(user_id: powerplay['player1'])
game.game_users.find_by_user_id(powerplay['player1'])
game.game_users
powerplay['player_1']
powerplay
gu1
gu1 = game.game_users.find_by_user_id(powerplay['player1'])
c!
play.card_draw[:card_drawn]
play.card_draw["card_drawn"]
play.card_draw
c
event['new_card']
event['type']==DISCARD
event
c
event['type']
event
c!
params[:event]['turn']
params[:event]
filter_params
event
c
action
c!
@game.users.first
@game.users
@game.users.length
@game.users
c!
